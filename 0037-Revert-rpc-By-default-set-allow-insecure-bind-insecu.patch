From 17f8e37321527c35673d88dc89a79c65054c3a4d Mon Sep 17 00:00:00 2001
From: Gaurav Kumar Garg <ggarg@redhat.com>
Date: Fri, 16 Oct 2015 14:47:40 +0530
Subject: [PATCH 37/67] Revert "rpc: By default set allow-insecure, bind-insecure to on"

When user upgrade from RHGS-3.1.1 to RHGS-3.1.2 then on updated
node peer is going to DISCONNECTED state. This is because of
we was having insecure port enable by default in RHGS-3.1.2
and insecure port was disabled by defalut in RHGS-3.1.1.
So if updated node (RHGS-3.1.2) send rpc request
with (insecure port) to RHGS-3.1.1 node then RHGS-3.1.1 will
not accept insecure port request, consequence is peer in
RHGS-3.1.2 node move to DISCONNECTED state.

commit 243a5b429f225acb8e7132264fe0a0835ff013d5 set by default
insecure port enable in RHGS-3.1.2

Fix is to reverts commit 243a5b429f225acb8e7132264fe0a0835ff013d5

Reason for reverting this changes because of we don't want
to have workaround to solve above problem for minor release.

Change-Id: I00f698ad1959fea2888567e580e68f7a07629216
BUG: 1271999
Signed-off-by: Gaurav Kumar Garg <ggarg@redhat.com>
Reviewed-on: https://code.engineering.redhat.com/gerrit/59549
Reviewed-by: Raghavendra Gowdappa <rgowdapp@redhat.com>
Tested-by: Raghavendra Gowdappa <rgowdapp@redhat.com>
---
 rpc/rpc-lib/src/rpc-transport.c     |    3 +--
 rpc/rpc-lib/src/rpcsvc-auth.c       |   13 +------------
 rpc/rpc-lib/src/rpcsvc.c            |    6 ++----
 rpc/rpc-transport/socket/src/name.c |   26 ++++++++++----------------
 4 files changed, 14 insertions(+), 34 deletions(-)

diff --git a/rpc/rpc-lib/src/rpc-transport.c b/rpc/rpc-lib/src/rpc-transport.c
index bf4fcad..ec153da 100644
--- a/rpc/rpc-lib/src/rpc-transport.c
+++ b/rpc/rpc-lib/src/rpc-transport.c
@@ -267,8 +267,7 @@ rpc_transport_load (glusterfs_ctx_t *ctx, dict_t *options, char *trans_name)
                 else
                         trans->bind_insecure = 0;
         } else {
-                /* By default allow bind insecure */
-                trans->bind_insecure = 1;
+                trans->bind_insecure = 0;
         }
 
 	ret = dict_get_str (options, "transport-type", &type);
diff --git a/rpc/rpc-lib/src/rpcsvc-auth.c b/rpc/rpc-lib/src/rpcsvc-auth.c
index b7d6c22..6b4c793 100644
--- a/rpc/rpc-lib/src/rpcsvc-auth.c
+++ b/rpc/rpc-lib/src/rpcsvc-auth.c
@@ -221,20 +221,9 @@ rpcsvc_set_allow_insecure (rpcsvc_t *svc, dict_t *options)
                         else
                                 svc->allow_insecure = 0;
                 }
-        } else {
-                /* By default set allow-insecure to true */
-                svc->allow_insecure = 1;
-
-                /* setting in options for the sake of functions that look
-                 * configuration params for allow insecure,  eg: gf_auth
-                 */
-                ret = dict_set_str (options, "rpc-auth-allow-insecure", "on");
-                if (ret < 0)
-                        gf_log ("rpc-auth", GF_LOG_DEBUG,
-                                        "dict_set failed for 'allow-insecure'");
         }
 
-        return ret;
+        return 0;
 }
 
 int
diff --git a/rpc/rpc-lib/src/rpcsvc.c b/rpc/rpc-lib/src/rpcsvc.c
index 8307d2f..2bae353 100644
--- a/rpc/rpc-lib/src/rpcsvc.c
+++ b/rpc/rpc-lib/src/rpcsvc.c
@@ -636,10 +636,8 @@ rpcsvc_handle_rpc_call (rpcsvc_t *svc, rpc_transport_t *trans,
                         gf_log (GF_RPCSVC, GF_LOG_ERROR,
                                 "Request received from non-"
                                 "privileged port. Failing request");
-                        req->rpc_status = MSG_DENIED;
-                        req->rpc_err = AUTH_ERROR;
-                        req->auth_err = RPCSVC_AUTH_REJECT;
-                        goto err_reply;
+                        rpcsvc_request_destroy (req);
+                        return -1;
         }
 
         /* DRC */
diff --git a/rpc/rpc-transport/socket/src/name.c b/rpc/rpc-transport/socket/src/name.c
index 650c5a7..a936fa5 100644
--- a/rpc/rpc-transport/socket/src/name.c
+++ b/rpc/rpc-transport/socket/src/name.c
@@ -23,21 +23,6 @@
 #include "socket.h"
 #include "common-utils.h"
 
-static void
-_assign_port (struct sockaddr *sockaddr, uint16_t port)
-{
-        switch (sockaddr->sa_family) {
-        case AF_INET6:
-                ((struct sockaddr_in6 *)sockaddr)->sin6_port = htons (port);
-                break;
-
-        case AF_INET_SDP:
-        case AF_INET:
-                ((struct sockaddr_in *)sockaddr)->sin_port = htons (port);
-                break;
-        }
-}
-
 static int32_t
 af_inet_bind_to_port_lt_ceiling (int fd, struct sockaddr *sockaddr,
                                  socklen_t sockaddr_len, uint32_t ceiling)
@@ -56,7 +41,16 @@ af_inet_bind_to_port_lt_ceiling (int fd, struct sockaddr *sockaddr,
 
         while (port)
         {
-                _assign_port (sockaddr, port);
+                switch (sockaddr->sa_family) {
+                case AF_INET6:
+                        ((struct sockaddr_in6 *)sockaddr)->sin6_port = htons (port);
+                        break;
+
+                case AF_INET_SDP:
+                case AF_INET:
+                        ((struct sockaddr_in *)sockaddr)->sin_port = htons (port);
+                        break;
+                }
                 // ignore the reserved ports
                 if (ports[port] == _gf_true) {
                         port--;
-- 
1.7.1

