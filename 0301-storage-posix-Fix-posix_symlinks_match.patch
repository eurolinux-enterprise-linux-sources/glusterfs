From 4d1636273b5333ed88ffd051c365490c73a380da Mon Sep 17 00:00:00 2001
From: Pranith Kumar K <pkarampu@redhat.com>
Date: Tue, 26 Jun 2018 15:58:02 +0530
Subject: [PATCH 301/305] storage/posix: Fix posix_symlinks_match()

	Upstream patch: https://review.gluster.org/20399

1) snprintf into linkname_expected should happen with PATH_MAX
2) comparison should happen with linkname_actual with complete
   string linkname_expected

BUG: 1558989
Change-Id: Ic3b3c362dc6c69c046b9a13e031989be47ecff14
Signed-off-by: Pranith Kumar K <pkarampu@redhat.com>
Reviewed-on: https://code.engineering.redhat.com/gerrit/142486
Tested-by: RHGS Build Bot <nigelb@redhat.com>
Reviewed-by: Sunil Kumar Heggodu Gopala Acharya <sheggodu@redhat.com>
---
 tests/bugs/replicate/bug-1477169-entry-selfheal-rename.t | 15 ++++++++++-----
 xlators/storage/posix/src/posix.c                        | 16 +++++++++++++---
 2 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/tests/bugs/replicate/bug-1477169-entry-selfheal-rename.t b/tests/bugs/replicate/bug-1477169-entry-selfheal-rename.t
index 465800b..bb858a8 100644
--- a/tests/bugs/replicate/bug-1477169-entry-selfheal-rename.t
+++ b/tests/bugs/replicate/bug-1477169-entry-selfheal-rename.t
@@ -13,10 +13,10 @@ EXPECT_WITHIN $CHILD_UP_TIMEOUT "1" afr_child_up_status $V0 0
 EXPECT_WITHIN $CHILD_UP_TIMEOUT "1" afr_child_up_status $V0 1
 EXPECT_WITHIN $CHILD_UP_TIMEOUT "1" afr_child_up_status $V0 2
 
-TEST mkdir -p $M0/d1/dir $M0/d2
+TEST mkdir -p $M0/d1/dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789 $M0/d2
 gfid_d1=$(gf_get_gfid_xattr $B0/${V0}0/d1)
 gfid_d2=$(gf_get_gfid_xattr $B0/${V0}0/d2)
-gfid_dir=$(gf_get_gfid_xattr $B0/${V0}0/d1/dir)
+gfid_dir=$(gf_get_gfid_xattr $B0/${V0}0/d1/dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)
 
 gfid_str_d1=$(gf_gfid_xattr_to_str $gfid_d1)
 gfid_str_d2=$(gf_gfid_xattr_to_str $gfid_d2)
@@ -24,7 +24,7 @@ gfid_str_d3=$(gf_gfid_xattr_to_str $gfid_dir)
 
 # Kill 3rd brick and rename the dir from mount.
 TEST kill_brick $V0 $H0 $B0/${V0}2
-TEST mv $M0/d1/dir $M0/d2
+TEST mv $M0/d1/dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789 $M0/d2
 
 # Bring it back and trigger heal.
 TEST $CLI volume start $V0 force
@@ -38,10 +38,15 @@ EXPECT_WITHIN $CHILD_UP_TIMEOUT "1" afr_child_up_status_in_shd $V0 2
 TEST $CLI volume heal $V0
 EXPECT_WITHIN $HEAL_TIMEOUT "^0$" get_pending_heal_count $V0
 
-# Check that .glusterfs symlink for dir exists and points to d2/dir
+# Check that .glusterfs symlink for dir exists and points to d2/dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
 TEST linkname=$(readlink $B0/${V0}2/.glusterfs/${gfid_str_d3:0:2}/${gfid_str_d3:2:2}/$gfid_str_d3)
-EXPECT "dir" basename $linkname
+EXPECT "dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789" basename $linkname
 TEST parent_dir_gfid_str=$(echo $linkname|cut -d / -f5)
 EXPECT $gfid_str_d2 echo $parent_dir_gfid_str
 
+TEST rmdir $M0/d2/dir012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
+
+TEST ! stat $B0/${V0}0/.glusterfs/${gfid_str_d3:0:2}/${gfid_str_d3:2:2}/$gfid_str_d3
+TEST ! stat $B0/${V0}1/.glusterfs/${gfid_str_d3:0:2}/${gfid_str_d3:2:2}/$gfid_str_d3
+TEST ! stat $B0/${V0}2/.glusterfs/${gfid_str_d3:0:2}/${gfid_str_d3:2:2}/$gfid_str_d3
 cleanup;
diff --git a/xlators/storage/posix/src/posix.c b/xlators/storage/posix/src/posix.c
index 6aa64f9..af54882 100644
--- a/xlators/storage/posix/src/posix.c
+++ b/xlators/storage/posix/src/posix.c
@@ -125,17 +125,27 @@ posix_symlinks_match (xlator_t *this, loc_t *loc, uuid_t gfid)
         handle_size = POSIX_GFID_HANDLE_SIZE(priv->base_path_length);
         dir_handle = alloca0 (handle_size);
 
-        snprintf (linkname_expected, handle_size, "../../%02x/%02x/%s/%s",
+        snprintf (linkname_expected, PATH_MAX, "../../%02x/%02x/%s/%s",
                   loc->pargfid[0], loc->pargfid[1], uuid_utoa (loc->pargfid),
                   loc->name);
 
         MAKE_HANDLE_GFID_PATH (dir_handle, this, gfid, NULL);
         len = sys_readlink (dir_handle, linkname_actual, PATH_MAX);
-        if (len < 0)
+        if (len < 0 || len == PATH_MAX) {
+                if (len == PATH_MAX) {
+                        errno = EINVAL;
+                }
+
+                if (errno != ENOENT) {
+                        gf_msg (this->name, GF_LOG_ERROR, errno,
+                                P_MSG_LSTAT_FAILED, "readlink[%s] failed",
+                                dir_handle);
+                }
                 goto out;
+        }
         linkname_actual[len] = '\0';
 
-        if (!strncmp (linkname_actual, linkname_expected, handle_size))
+        if (!strcmp (linkname_actual, linkname_expected))
                 ret = _gf_true;
 
 out:
-- 
1.8.3.1

