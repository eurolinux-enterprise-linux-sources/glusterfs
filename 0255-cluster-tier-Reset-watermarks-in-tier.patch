From 5d654a4a13c8b4c7332e9cd65912c0e77ee7d4e4 Mon Sep 17 00:00:00 2001
From: N Balachandran <nbalacha@redhat.com>
Date: Thu, 4 Feb 2016 11:21:52 +0530
Subject: [PATCH 255/258] cluster/tier : Reset watermarks in tier

A node which contains only cold bricks and has detected that
the high watermark value has been breached on the hot tier will
never reset the watermark to the correct value. The promotion check
will thus always fail and no promotions will occur from that node.

upstream : http://review.gluster.org/#/c/13341/
           http://review.gluster.org/13357

Change-Id: I18a2575a084773c534504743dab1fe076f9a5447
BUG: 1303894
Signed-off-by: N Balachandran <nbalacha@redhat.com>
Reviewed-on: https://code.engineering.redhat.com/gerrit/67051
Reviewed-by: Rafi Kavungal Chundattu Parambil <rkavunga@redhat.com>
Reviewed-by: Dan Lambright <dlambrig@redhat.com>
---
 xlators/cluster/dht/src/tier.c |   56 +++++++++++++++++++++++++++++++++------
 1 files changed, 47 insertions(+), 9 deletions(-)

diff --git a/xlators/cluster/dht/src/tier.c b/xlators/cluster/dht/src/tier.c
index 42ac836..2df14d3 100644
--- a/xlators/cluster/dht/src/tier.c
+++ b/xlators/cluster/dht/src/tier.c
@@ -35,6 +35,9 @@ static gfdb_methods_t gfdb_methods;
 #define DB_QUERY_RECORD_SIZE 4096
 
 
+/* Check and update the watermark every WM_INTERVAL seconds */
+#define WM_INTERVAL            5
+
 static int
 tier_check_same_node (xlator_t *this, loc_t *loc, gf_defrag_info_t *defrag)
 {
@@ -173,6 +176,17 @@ exit:
         return ret;
 }
 
+static gf_boolean_t
+is_hot_tier_full (gf_tier_conf_t *tier_conf)
+{
+        if (tier_conf && (tier_conf->mode == TIER_MODE_WM) &&
+           (tier_conf->watermark_last == TIER_WM_HI))
+                return _gf_true;
+
+        return _gf_false;
+}
+
+
 int
 tier_do_migration (xlator_t *this, int promote, loc_t *root_loc)
 {
@@ -353,6 +367,21 @@ tier_migrate_using_query_file (void *_args)
                 if (!tier_do_migration (this, query_cbk_args->is_promotion, &root_loc)) {
                         gfdb_methods.gfdb_query_record_free (query_record);
                         query_record = NULL;
+
+                        /* We have crossed the high watermark. Stop processing
+                         * files if this is a promotion cycle so demotion gets
+                         * a chance to start if not already running*/
+
+                        if (query_cbk_args->is_promotion &&
+                            is_hot_tier_full (&defrag->tier_conf)) {
+
+                                gf_msg (this->name, GF_LOG_INFO, 0,
+                                        DHT_MSG_LOG_TIER_STATUS,
+                                        "High watermark crossed during "
+                                        "promotion. Exiting "
+                                        "tier_migrate_using_query_file");
+                                break;
+                        }
                         continue;
                 }
 
@@ -443,8 +472,6 @@ tier_migrate_using_query_file (void *_args)
                         p_loc.inode = linked_inode;
 
 
-
-
                         /* Preparing File Inode */
                         gf_uuid_copy (loc.gfid, query_record->gfid);
                         loc.inode = inode_new (defrag->root_inode->table);
@@ -1404,6 +1431,8 @@ tier_start (xlator_t *this, gf_defrag_info_t *defrag)
         xlator_t *xlator                        = NULL;
         gf_tier_conf_t *tier_conf               = NULL;
         loc_t root_loc                          = { 0 };
+        int check_watermark                     = 0;
+
 
         conf   = this->private;
 
@@ -1483,6 +1512,19 @@ tier_start (xlator_t *this, gf_defrag_info_t *defrag)
                         goto out;
                 }
 
+                check_watermark++;
+
+                if (check_watermark >= WM_INTERVAL) {
+                        check_watermark = 0;
+                        ret = tier_check_watermark (this, &root_loc);
+                        if (ret != 0) {
+                                gf_msg (this->name, GF_LOG_CRITICAL, errno,
+                                        DHT_MSG_LOG_TIER_ERROR,
+                                        "Failed to get watermark");
+                                continue;
+                        }
+                }
+
                 freq_demote = tier_get_freq_demote (tier_conf);
 
                 is_demotion_triggered = (is_hot_list_empty) ? _gf_false :
@@ -1499,13 +1541,9 @@ tier_start (xlator_t *this, gf_defrag_info_t *defrag)
                 if (!is_promotion_triggered && !is_demotion_triggered)
                         continue;
 
-                ret = tier_check_watermark (this, &root_loc);
-                if (ret != 0) {
-                        gf_msg (this->name, GF_LOG_CRITICAL, errno,
-                                DHT_MSG_LOG_TIER_ERROR,
-                                "Failed to get watermark");
-                        goto out;
-                }
+                /* Check the statfs immediately after the processing threads
+                   return */
+                check_watermark = WM_INTERVAL;
 
                 ret_promotion = -1;
                 ret_demotion = -1;
-- 
1.7.1

